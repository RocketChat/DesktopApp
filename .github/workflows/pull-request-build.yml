name: Build pull request artifacts

on:
  pull_request:
    branches:
      - master
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  check-self-hosted-macos:
    runs-on: ubuntu-latest
    outputs:
      macos-runner-available: ${{ steps.check.outputs.macosRunnerAvailable }}
    steps:
      - name: Set up GitHub CLI
        uses: actions/setup-gh@v3

      - name: Check for self-hosted macOS runner availability
        id: check
        run: |
          macos_runners=$(gh api -H "Accept: application/vnd.github.v3+json" /repos/${{ github.repository }}/actions/runners | jq '.runners[] | select(.labels | .[] | select(.name == "macos")) | select(.status == "online")')
          if [ -z "$macos_runners" ]; then
            echo "macosRunnerAvailable=false" >> $GITHUB_ENV
          else
            echo "macosRunnerAvailable=true" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check-self-hosted-macos
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: macos-latest
          - os: self-hosted-macos
            include-if: ${{ needs.check-self-hosted-macos.outputs.macos-runner-available == 'true' }}
    runs-on: ${{ matrix.os == 'self-hosted-macos' ? 'self-hosted && macos' : matrix.os }}
    steps:
      - name: Disable git core.autocrlf
        run: git config --global core.autocrlf false

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 21.7.1
        uses: actions/setup-node@v4
        with:
          node-version: '21.7.1'

      - name: Use Yarn cache (Linux/MacOS)
        if: ${{ matrix.os != 'windows-latest' }}
        id: yarn-cache-linux-macos
        uses: actions/cache@v4
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Use Yarn cache (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        id: yarn-cache-windows
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\AppData\Local\Yarn\Cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install package dependencies
        run: yarn install

      - name: Lint
        run: yarn lint

      - name: Test
        run: yarn test

      - name: Build app/
        run: yarn build
        env:
          NODE_ENV: production
          BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

      - name: Build Windows Package
        if: ${{ matrix.os == 'windows-latest' }}
        run: yarn electron-builder --publish never --x64 --win nsis
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

      - name: Build MacOS Package
        if: matrix.os == 'macos-latest' || (matrix.os == 'self-hosted-macos' && needs.check-self-hosted-macos.outputs.macos-runner-available == 'true')
        run: |
          sudo mdutil -a -i off
          yarn electron-builder --publish never --mac --universal
        env:
          CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          CSC_FOR_PULL_REQUEST: true
          FORCE_NOTARIZE: true
          APPLEID: ${{ secrets.APPLEID }}
          APPLEIDPASS: ${{ secrets.APPLEIDPASS }}
          ASC_PROVIDER: 'S6UPZG7ZR3'

      - name: Build Ubuntu Package
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: yarn electron-builder --publish never --linux snap

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Artifacts
          path: |
            dist/rocketchat-*.dmg
            dist/rocketchat-*.pkg
            dist/rocketchat-*.exe
            dist/rocketchat-*.snap